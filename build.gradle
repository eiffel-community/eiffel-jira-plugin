/*
 * Copyright 2018 Jaden Young
 * For a full list of individual contributors, please see the commit history.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
	ext {
		springBootVersion = '1.5.10.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url 'http://repo.spring.io/plugins-release' }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2')
	}
}

configure(allprojects) {
	apply plugin: 'propdeps'
	apply plugin: 'propdeps-maven'
	apply plugin: 'propdeps-idea'
	apply plugin: 'propdeps-eclipse'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

group = 'com.github.eiffel-community'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

// The eiffel-community DockerHub user doesn't currently exist.
docker {
	dependsOn bootRepackage
	name "eiffel-community/${jar.baseName}:${jar.version}"
	files jar.outputs
	buildArgs(['JAR_FILE': jar.archiveName])
}

repositories {
	mavenCentral()
}


dependencies {
    compileOnly('org.immutables:value:2.5.5')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jdk8')
	compile('org.springframework.boot:spring-boot-starter-amqp')
	compile('org.springframework.boot:spring-boot-starter-web')
	runtime('org.springframework.boot:spring-boot-devtools')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	compileOnly('org.springframework.boot:spring-boot-configuration-processor')
}

compileJava.dependsOn(processResources)
